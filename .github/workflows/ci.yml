name: CI

on:
  push:
  pull_request:
  schedule:
    - cron:  '0 0 1 * *'

jobs:
  Linux:
    name: Linux C++

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.cxx == 'clang++' && matrix.os == 'ubuntu-20.04' }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-24.04]
        cxx: [g++, clang++]
      fail-fast: false
    env:
      CXX: ${{ matrix.cxx }}
    steps:
    - uses: actions/checkout@v4
    - name: Before script
      run: |
        sudo apt-get update -y
        sudo apt-get install -y cppcheck
        $CXX --version
    - name: Script
      run: |
        ARGS=( -std=gnu++17 -Wall -g -Og )
        if [[ $CXX == clang* ]]; then
            ARGS+=( -fsanitize=address,undefined,integer )
        else
            ARGS+=( -fsanitize=address,undefined )
        fi
        $CXX "${ARGS[@]}" tables.cpp -o tables
        ./tables
        $CXX "${ARGS[@]}" graphs.cpp -o graphs
        ./graphs
    - name: Cppcheck
      run: cppcheck --enable=all .
    - name: Clang-Tidy
      if: ${{ matrix.cxx == 'clang++' }}
      run: clang-tidy -checks='bugprone-*,-bugprone-easily-swappable-parameters,cert-*,clang-analyzer-*,misc-*,-misc-no-recursion,modernize-*,-modernize-use-trailing-return-type,performance-*,portability-*,readability-const-return-type,readability-container-*,readability-duplicate-include,readability-else-after-return,readability-make-member-function-cons,readability-non-const-parameter,readability-redundant-*,readability-simplify-*,readability-string-compare,readability-use-*' -header-filter='.*' *.cpp -- -Wall -O3 -std=c++17

  Pylint:
    name: Pylint

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install pylint
    - name: Script
      run: pylint -f github --py-version 3.7 -d design,C0103,W0311,C0301,C0302,C0209,R1702 --load-plugins pylint.extensions.code_style,pylint.extensions.comparison_placement,pylint.extensions.for_any_all,pylint.extensions.consider_refactoring_into_while_condition,pylint.extensions.consider_ternary_expression,pylint.extensions.dict_init_mutate,pylint.extensions.docstyle,pylint.extensions.check_elif,pylint.extensions.set_membership,pylint.extensions.typing -e R6104,C1804,C1805 -r y python/*.py
      continue-on-error: true

  Ruff:
    name: Ruff

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install ruff
    - name: Script
      run: ruff check --output-format=github --target-version py37 --select F,E4,E7,E9,W,I,D,UP,YTT,ANN,S,BLE,B,A,COM819,C4,T10,EM,EXE,ISC,ICN,G,PIE,PYI,Q,RSE,RET,SLF,SLOT,SIM,TID,TC,ARG,PGH,PL,TRY,FLY,PERF,FURB,LOG,RUF --preview --ignore W191,D211,D213,D401,PLR09,PLR1702,PLR2004,FURB101,FURB167,RUF001,RUF002,RUF003,RUF023 .
      continue-on-error: true

  Python:
    name: Linux Python

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12", "3.13", "pypy3.7", "pypy3.8", "pypy3.9", "pypy3.10"]
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # python -m pip install wcwidth
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Script
      run: |
        python -X dev python/test.py
